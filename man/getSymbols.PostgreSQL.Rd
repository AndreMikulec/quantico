% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/database.R
\name{getSymbols.PostgreSQL}
\alias{getSymbols.PostgreSQL}
\title{Retrieve Data from PostgreSQL Database}
\usage{
getSymbols.PostgreSQL(Symbols, env, return.class = "xts",
  db.fields = c("o", "h", "l", "c", "v", "a"), field.names = c("Open",
  "High", "Low", "Close", "Volume", "Adjusted"), user = NULL,
  password = NULL, dbname = NULL, schname = NULL,
  host = "localhost", port = 5432, options = NULL,
  forceISOdate = NULL, ...)
}
\arguments{
\item{Symbols}{a charcter vector specifying
the names of each symbol to be laoded}

\item{env}{where to create objects (.GlobalEnv)}

\item{return.class}{desirect class of returned object.
Can be xts, zoo, data.fram, or xts. (zoo)}

\item{db.fields}{character vector indicating
names of fields to retrieve}

\item{field.names}{names assigned to returned columns}

\item{user}{username to access database}

\item{password}{password to access database}

\item{dbname}{database name}

\item{schname}{schema name}

\item{host}{database host}

\item{port}{database port}

\item{options}{pass extra parameters in a string to the command line}

\item{forceISOdate}{FALSE/TRUE if the communication of date (time stamp) from PostgreSQL
is forced to ISO style at conection}
}
\value{
A call to getSymbols.MySQL will load into the specified
environment one object for each \code{Symbol} specified,
with class defined by \code{return.class}.
}
\description{
Fetch data from PostgreSQL database.  As with other
methods extending the \code{getSymbols} function,
this should \emph{NOT} be called directly.  Its
documentation is meant to highlight the formal
arguments, as well as provide a reference for
further user contributed data tools.
}
\details{
Meant to be called internally by \code{getSymbols} (see also)

One of a few currently defined methods for loading data for
use with \pkg{quantmod}. Its use requires the packages
\pkg{DBI} and \pkg{RPostgreSQL}, along with a running
PostgreSQL database with tables corresponding to the
\code{Symbol} name.

The purpose of this abstraction is to make transparent the
\sQuote{source} of the data, allowing instead the user to
concentrate on the data itself.

The default configuration needs a table named
for the Symbol specified (e.g. MSFT), with
column names date,o,h,l,c,v,a. For table
layout changes it is best to use
\code{setDefaults(getSymbols.PostgreSQL,...)} with
the new db.fields values specified.
}
\examples{
\dontrun{
# All 3 getSymbols calls return the same
# MSFT to the global environment
# The last example is what NOT to do!

setDefaults(getSymbols.PostgreSQL,user='jdoe',password='secret',
            dbname='tradedata')

## Method #1
getSymbols('MSFT',src='PostgreSQL')


## Method #2
setDefaults(getSymbols,src='PostgreSQL')
  # OR
setSymbolLookup(MSFT='PostgreSQL')

getSymbols('MSFT')

#########################################
##  NOT RECOMMENDED!!!
#########################################
## Method #3
getSymbols.PostgreSQL('MSFT',env=globalenv())
}
}
\references{
\cite{PostgreSQL \url{https://www.postgresql.org}}

\cite{David A. James and Saikat DebRoy (2006). R Interface to the MySQL databse. \url{www.omegahat.net}}

\cite{R-SIG-DB. DBI: R Database Interface}
}
\seealso{
\code{\link{getSymbols}}
\code{\link{setSymbolLookup}}
}
\author{
Jeffrey A. Ryan

Andre Mikulec (adapted original code to work with PostgreSQL)
}
\keyword{data}
