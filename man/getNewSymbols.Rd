% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/database.R
\name{getNewSymbols}
\alias{getNewSymbols}
\title{get a recent Symbol (if I do not have one)}
\usage{
getNewSymbols(Symbols = NULL, env = parent.frame(),
  reload.Symbols = FALSE, verbose = FALSE, warnings = TRUE,
  src = "yahoo", symbol.lookup = TRUE,
  auto.assign = getOption("getSymbols.auto.assign", TRUE),
  source.envir = NULL, nextsrc = c("cache", "pg"), MaxAge = NULL,
  ...)
}
\arguments{
\item{Symbols}{as quantmod getSymbols: a character vector specifying the names of each symbol to be loaded}

\item{env}{as quantmod getSymbols: where to create objects. Setting env=NULL is equal to auto.assign=FALSE}

\item{reload.Symbols}{as quantmod getSymbols: boolean to reload current symbols in specified environment. (FALSE)}

\item{verbose}{as quantmod getSymbols: boolean to turn on status of retrieval. (FALSE)}

\item{warnings}{as quantmod getSymbols: boolean to turn on warnings. (TRUE)}

\item{src}{as quantmod getSymbols: character string specifying sourcing method. (yahoo)}

\item{symbol.lookup}{as quantmod getSymbols: retrieve symbol's sourcing method from external lookup (TRUE)}

\item{auto.assign}{as quantmod getSymbols: should results be loaded to env.
If FALSE, return results instead. As of 0.4-0, this is the same as setting env=NULL. Defaults to TRUE.}

\item{nextsrc}{next alternative sourcing methods trying in order, if found data is refreshed in reverse order}

\item{MaxAge}{(default "4 hours") is longest age allowed, such the retrieving from
the "cache" will be done. If the MaxAge is exceeded then,
the Symbol(s) are refreshed anew from "src".
The format uses as.difftime: "# secs", "# mins", "# hours", "# days", "# weeks"}

\item{...}{as quantmod getSymbols: additional parameters}

\item{con}{DBI connection}

\item{envir.source}{source of Symbols}

\item{file.path}{as quantmod getSymbols: character string of file location}
}
\description{
\preformatted{

First look in  nextsrc[1].
If not found look in  nextsrc[2], . . . etc.
If ran out of nextsrc, look in src.
  Then next back-updated all of  nextsrc (going backwards).
 Alt: if DID NOT run out of nextsrc, then a nextsrc was found the newer data.
  Then next backload the newer data into all previous nextsrcs (going backwards).

}
}
\examples{
\dontrun{

# before, maybe, be sure,
# that "MSFT" is in the cache "cache" or database "pg"
# (example not shown)

ls(all.names = TRUE)
msft <- getNewSymbols("MSFT", src = "yahoo", auto.assign = FALSE)
ls(all.names = TRUE)

}
}
