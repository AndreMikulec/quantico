% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/database.R
\name{pgOldData}
\alias{pgOldData}
\title{collect from the Server DB a limited amount of data restricted by df and VarHint}
\usage{
pgOldData(con, trgt = NULL, keys = c("rn"), schname, df = NULL,
  varHint = NULL, valHint = NULL, IntentionFor = NULL)
}
\arguments{
\item{con}{DBI connection PostgreSQL}

\item{trgt}{remote server side string database table name of old data}

\item{keys}{trgt remote server side vector of strings of table
column names that make up a unique id for the row.
keys can not be zero length. keys can not be null.}

\item{schname}{schema name}

\item{df}{local client side data.frame of limited data
that determines what data is to be returned from the Server DB}

\item{varHint}{optional vector of character column names. Performance optimization
techique to limit the number of rows returned
from the database server to the client(R).
User must specify as paired position values.
e.g. varHint = "dateindex", valHint = "17000"
or e.g. varHint = c("dateindex", "ticker"), valHint = c("17000","'AAPL'")
Position matches one to one with valHint}

\item{valHint}{See varHint. Position matches one to one with varHint.}

\item{IntentionFor}{"UPDATE"(default), will collect 'key matching data.'
Otherwise "INSERT", will not collect 'key matching data.
About, "INSERT", the situation is best to use varHint and valHint to
generate some "INSERT" key to key comparison data.}
}
\description{
Elegible Server DB data that is available for update/insert.
The idea is to get data from the server, so that one MAY want to update/insert.
For performance reasons,
the unique combinations of the keys of the data.frame df
are sent to the server, to limit the number of rows returned from the server.
}
\details{
if a column is found in df and not found on the Server DB,
then, the function removes that column from df,
(because that column can not be selected from the Server DB),
and the user is warned about the column removal.
Hint, before running this function, run pgAddColumnType, to garantee(create)
columns from db to be new columns on the Server DB
}
\examples{
\dontrun{

# setup
SuBmtcars <- mtcars[c(1,5),1:2]
oldData <- data.table::data.table(SuBmtcars, keep.rownames=TRUE, key="rn")
oldData[1,2] <- NA; oldData[2,3] <- NA

con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "postgres")
DBI::dbExecute(con, "DROP TABLE IF EXISTS public.mtcars")
DBI::dbWriteTable(con, "mtcars", oldData, row.names = FALSE)

newData <- data.table::data.table(SuBmtcars, keep.rownames=TRUE, key="rn")
newData[2,2] <- NA; newData[1,3] <- NA

oldData <- pgOldData(con, trgt = "mtcars", keys = c("rn"), schname = "public", df = newData)

DBI::dbDisconnect(con)

}
}
